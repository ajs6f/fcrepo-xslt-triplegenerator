<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <body>
        <section name="Rules for constructing XSLT for use with this component">
            <p>
                XSLT for use with this component must fulfil certain conditions. 
            </p>
            <ol>
                <li>It must transform a single XML metadata document into a single RDF/XML document.</li>
                <li>The RDF-subjects used in the output document must be of a few possible types:
                    <ol>
                        <li>The Fedora URI of the object in question (<code>info:fedora/some:pid123</code>).</li>
                        <li>The Fedora URI of a datastream in the object in question (<code>info:fedora/some:pid123/descMetadata</code>).</li>
                        <li>An URI that is not used in the triples generated from <i>any</i> other object. This is the most subtle case.
                            It would be best to use UUIDs or other systems for generating IDs with low likelihood of collision. (For example,
                        using the pid and datastream of the object as input to a hash function.)</li>
                    </ol>
                </li>
            </ol>
            <p>The danger of violating the second condition is that various objects producing triples with subjects that
           collide or conflict with each other will create broken updating behavior for the Resource Index. For an example, take two objects, each of which
            produces a triple: <code><![CDATA[<http://books.org/TomSawyer> hasAuthor <http://people.org/MarkTwain>]]></code>. The Resource Index
            will contain only one copy of the triple (since triples with the same subject, predicate, and object are identical). When
            one of the objects is purged, the triple will be purged. But the other object (still in the repo) will still require the existence
            of the triple for the Resource Index to accurately portray the contents of the repository.</p>
        </section>
        <section name="Blank nodes">
            <p>
                For some kinds of complex description in RDF, it is desired to use blank nodes (unidentified nodes). Obviously,
                this conflicts with the rules given above. Because this component and much of Fedora's internal machinery
                do not transact in RDF documents, but in sets of triples, it's not possible to make guarantees about how blank
                nodes will be handled. So in places where you might like to use blank nodes, you'll have to use (automatically)
                generated IDs instead. For example, to insert an automatically identified node into some RDF/XML, you might incant:
            </p>
            <source>
                <![CDATA[
                    <rdf:RDF>
                        <rdf:Description rdf:about="info:fedora/{pid}">
                            <!-- we avoid using a blank node -->
                            <myns:somePredicate rdf:resource="info:fedora/{pid}/{generate-id()}/1"/>
                        </rdf:Description>
                        <rdf:Description rdf:about="info:fedora/{pid}/{generate-id()}/1">
                            <myns:someOtherPredicate rdf:resource="http://example.com/x"/>
                            <myns:aThirdPredicate rdf:resource="http://example.com/y"/>
                        </rdf:Description>
                    </rdf:RDF>
                ]]>
            </source>
        </section>
    </body>
</document>